

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
    public sealed partial class UtilizationTracker : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the UtilizationTracker entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UtilizationTracker()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UtilizationTracker(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.UtilizationTracker> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.UtilizationTracker.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UtilizationTracker_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UtilizationTracker_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal WorkedHours
        {
            get
            {
                return global::LightSwitchApplication.UtilizationTracker.DetailsClass.GetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.WorkedHours);
            }
            set
            {
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.SetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.WorkedHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkedHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkedHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkedHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int EmpID
        {
            get
            {
                return global::LightSwitchApplication.UtilizationTracker.DetailsClass.GetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.EmpID);
            }
            set
            {
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.SetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.EmpID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmpID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmpID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmpID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int MonthID
        {
            get
            {
                return global::LightSwitchApplication.UtilizationTracker.DetailsClass.GetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.MonthID);
            }
            set
            {
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.SetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.MonthID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MonthID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MonthID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MonthID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<int> TotalHours
        {
            get
            {
                return global::LightSwitchApplication.UtilizationTracker.DetailsClass.GetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.TotalHours);
            }
            set
            {
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.SetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.TotalHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TotalHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TotalHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TotalHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int WeekDays
        {
            get
            {
                return global::LightSwitchApplication.UtilizationTracker.DetailsClass.GetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.WeekDays);
            }
            set
            {
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.SetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.WeekDays, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WeekDays_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WeekDays_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WeekDays_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<int> WorkingDays
        {
            get
            {
                return global::LightSwitchApplication.UtilizationTracker.DetailsClass.GetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.WorkingDays);
            }
            set
            {
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.SetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.WorkingDays, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkingDays_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkingDays_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkingDays_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string MonthName
        {
            get
            {
                return global::LightSwitchApplication.UtilizationTracker.DetailsClass.GetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.MonthName);
            }
            set
            {
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.SetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.MonthName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MonthName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MonthName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MonthName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Holidays
        {
            get
            {
                return global::LightSwitchApplication.UtilizationTracker.DetailsClass.GetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.Holidays);
            }
            set
            {
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.SetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.Holidays, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Holidays_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Holidays_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Holidays_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Year
        {
            get
            {
                return global::LightSwitchApplication.UtilizationTracker.DetailsClass.GetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.Year);
            }
            set
            {
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.SetValue(this, global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.Year, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Year_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Year_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Year_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.UtilizationTracker,
                global::LightSwitchApplication.UtilizationTracker.DetailsClass,
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.IImplementation,
                global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.WorkedHours;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass>.Entry
                __UtilizationTrackerEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass>.Entry(
                    global::LightSwitchApplication.UtilizationTracker.DetailsClass.__UtilizationTracker_CreateNew,
                    global::LightSwitchApplication.UtilizationTracker.DetailsClass.__UtilizationTracker_Created,
                    global::LightSwitchApplication.UtilizationTracker.DetailsClass.__UtilizationTracker_AllowSaveWithErrors);
            private static global::LightSwitchApplication.UtilizationTracker __UtilizationTracker_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.UtilizationTracker> es)
            {
                return new global::LightSwitchApplication.UtilizationTracker(es);
            }
            private static void __UtilizationTracker_Created(global::LightSwitchApplication.UtilizationTracker e)
            {
                e.UtilizationTracker_Created();
            }
            private static bool __UtilizationTracker_AllowSaveWithErrors(global::LightSwitchApplication.UtilizationTracker e)
            {
                bool result = false;
                e.UtilizationTracker_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, decimal> WorkedHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.WorkedHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int> EmpID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.EmpID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int> MonthID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.MonthID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>> TotalHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.TotalHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int> WeekDays
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.WeekDays) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>> WorkingDays
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.WorkingDays) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, string> MonthName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.MonthName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int> Holidays
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.Holidays) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int> Year
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties.Year) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new decimal WorkedHours { get; set; }
                new int EmpID { get; set; }
                new int MonthID { get; set; }
                new global::System.Nullable<int> TotalHours { get; set; }
                new int WeekDays { get; set; }
                new global::System.Nullable<int> WorkingDays { get; set; }
                new string MonthName { get; set; }
                new int Holidays { get; set; }
                new int Year { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, decimal>.Entry
                    WorkedHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, decimal>.Entry(
                        "WorkedHours",
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkedHours_Stub,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkedHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkedHours_Validate,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkedHours_GetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkedHours_SetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkedHours_OnValueChanged);
                private static void _WorkedHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.UtilizationTracker.DetailsClass d, object sf)
                {
                    c(d, ref d._WorkedHours, sf);
                }
                private static bool _WorkedHours_ComputeIsReadOnly(global::LightSwitchApplication.UtilizationTracker e)
                {
                    bool result = false;
                    e.WorkedHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _WorkedHours_Validate(global::LightSwitchApplication.UtilizationTracker e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.WorkedHours_Validate(r);
                }
                private static decimal _WorkedHours_GetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d)
                {
                    return d.ImplementationEntity.WorkedHours;
                }
                private static void _WorkedHours_SetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.WorkedHours = v;
                }
                private static void _WorkedHours_OnValueChanged(global::LightSwitchApplication.UtilizationTracker e)
                {
                    e.WorkedHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Entry
                    EmpID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Entry(
                        "EmpID",
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._EmpID_Stub,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._EmpID_ComputeIsReadOnly,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._EmpID_Validate,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._EmpID_GetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._EmpID_SetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._EmpID_OnValueChanged);
                private static void _EmpID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Data> c, global::LightSwitchApplication.UtilizationTracker.DetailsClass d, object sf)
                {
                    c(d, ref d._EmpID, sf);
                }
                private static bool _EmpID_ComputeIsReadOnly(global::LightSwitchApplication.UtilizationTracker e)
                {
                    bool result = false;
                    e.EmpID_IsReadOnly(ref result);
                    return result;
                }
                private static void _EmpID_Validate(global::LightSwitchApplication.UtilizationTracker e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.EmpID_Validate(r);
                }
                private static int _EmpID_GetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d)
                {
                    return d.ImplementationEntity.EmpID;
                }
                private static void _EmpID_SetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d, int v)
                {
                    d.ImplementationEntity.EmpID = v;
                }
                private static void _EmpID_OnValueChanged(global::LightSwitchApplication.UtilizationTracker e)
                {
                    e.EmpID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Entry
                    MonthID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Entry(
                        "MonthID",
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthID_Stub,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthID_ComputeIsReadOnly,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthID_Validate,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthID_GetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthID_SetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthID_OnValueChanged);
                private static void _MonthID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Data> c, global::LightSwitchApplication.UtilizationTracker.DetailsClass d, object sf)
                {
                    c(d, ref d._MonthID, sf);
                }
                private static bool _MonthID_ComputeIsReadOnly(global::LightSwitchApplication.UtilizationTracker e)
                {
                    bool result = false;
                    e.MonthID_IsReadOnly(ref result);
                    return result;
                }
                private static void _MonthID_Validate(global::LightSwitchApplication.UtilizationTracker e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.MonthID_Validate(r);
                }
                private static int _MonthID_GetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d)
                {
                    return d.ImplementationEntity.MonthID;
                }
                private static void _MonthID_SetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d, int v)
                {
                    d.ImplementationEntity.MonthID = v;
                }
                private static void _MonthID_OnValueChanged(global::LightSwitchApplication.UtilizationTracker e)
                {
                    e.MonthID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>>.Entry
                    TotalHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>>.Entry(
                        "TotalHours",
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._TotalHours_Stub,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._TotalHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._TotalHours_Validate,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._TotalHours_GetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._TotalHours_SetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._TotalHours_OnValueChanged);
                private static void _TotalHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>>.Data> c, global::LightSwitchApplication.UtilizationTracker.DetailsClass d, object sf)
                {
                    c(d, ref d._TotalHours, sf);
                }
                private static bool _TotalHours_ComputeIsReadOnly(global::LightSwitchApplication.UtilizationTracker e)
                {
                    bool result = false;
                    e.TotalHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _TotalHours_Validate(global::LightSwitchApplication.UtilizationTracker e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TotalHours_Validate(r);
                }
                private static global::System.Nullable<int> _TotalHours_GetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d)
                {
                    return d.ImplementationEntity.TotalHours;
                }
                private static void _TotalHours_SetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d, global::System.Nullable<int> v)
                {
                    d.ImplementationEntity.TotalHours = v;
                }
                private static void _TotalHours_OnValueChanged(global::LightSwitchApplication.UtilizationTracker e)
                {
                    e.TotalHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Entry
                    WeekDays = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Entry(
                        "WeekDays",
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WeekDays_Stub,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WeekDays_ComputeIsReadOnly,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WeekDays_Validate,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WeekDays_GetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WeekDays_SetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WeekDays_OnValueChanged);
                private static void _WeekDays_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Data> c, global::LightSwitchApplication.UtilizationTracker.DetailsClass d, object sf)
                {
                    c(d, ref d._WeekDays, sf);
                }
                private static bool _WeekDays_ComputeIsReadOnly(global::LightSwitchApplication.UtilizationTracker e)
                {
                    bool result = false;
                    e.WeekDays_IsReadOnly(ref result);
                    return result;
                }
                private static void _WeekDays_Validate(global::LightSwitchApplication.UtilizationTracker e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.WeekDays_Validate(r);
                }
                private static int _WeekDays_GetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d)
                {
                    return d.ImplementationEntity.WeekDays;
                }
                private static void _WeekDays_SetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d, int v)
                {
                    d.ImplementationEntity.WeekDays = v;
                }
                private static void _WeekDays_OnValueChanged(global::LightSwitchApplication.UtilizationTracker e)
                {
                    e.WeekDays_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>>.Entry
                    WorkingDays = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>>.Entry(
                        "WorkingDays",
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkingDays_Stub,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkingDays_ComputeIsReadOnly,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkingDays_Validate,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkingDays_GetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkingDays_SetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._WorkingDays_OnValueChanged);
                private static void _WorkingDays_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>>.Data> c, global::LightSwitchApplication.UtilizationTracker.DetailsClass d, object sf)
                {
                    c(d, ref d._WorkingDays, sf);
                }
                private static bool _WorkingDays_ComputeIsReadOnly(global::LightSwitchApplication.UtilizationTracker e)
                {
                    bool result = false;
                    e.WorkingDays_IsReadOnly(ref result);
                    return result;
                }
                private static void _WorkingDays_Validate(global::LightSwitchApplication.UtilizationTracker e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.WorkingDays_Validate(r);
                }
                private static global::System.Nullable<int> _WorkingDays_GetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d)
                {
                    return d.ImplementationEntity.WorkingDays;
                }
                private static void _WorkingDays_SetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d, global::System.Nullable<int> v)
                {
                    d.ImplementationEntity.WorkingDays = v;
                }
                private static void _WorkingDays_OnValueChanged(global::LightSwitchApplication.UtilizationTracker e)
                {
                    e.WorkingDays_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, string>.Entry
                    MonthName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, string>.Entry(
                        "MonthName",
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthName_Stub,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthName_ComputeIsReadOnly,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthName_Validate,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthName_GetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthName_SetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._MonthName_OnValueChanged);
                private static void _MonthName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, string>.Data> c, global::LightSwitchApplication.UtilizationTracker.DetailsClass d, object sf)
                {
                    c(d, ref d._MonthName, sf);
                }
                private static bool _MonthName_ComputeIsReadOnly(global::LightSwitchApplication.UtilizationTracker e)
                {
                    bool result = false;
                    e.MonthName_IsReadOnly(ref result);
                    return result;
                }
                private static void _MonthName_Validate(global::LightSwitchApplication.UtilizationTracker e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.MonthName_Validate(r);
                }
                private static string _MonthName_GetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d)
                {
                    return d.ImplementationEntity.MonthName;
                }
                private static void _MonthName_SetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d, string v)
                {
                    d.ImplementationEntity.MonthName = v;
                }
                private static void _MonthName_OnValueChanged(global::LightSwitchApplication.UtilizationTracker e)
                {
                    e.MonthName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Entry
                    Holidays = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Entry(
                        "Holidays",
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Holidays_Stub,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Holidays_ComputeIsReadOnly,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Holidays_Validate,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Holidays_GetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Holidays_SetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Holidays_OnValueChanged);
                private static void _Holidays_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Data> c, global::LightSwitchApplication.UtilizationTracker.DetailsClass d, object sf)
                {
                    c(d, ref d._Holidays, sf);
                }
                private static bool _Holidays_ComputeIsReadOnly(global::LightSwitchApplication.UtilizationTracker e)
                {
                    bool result = false;
                    e.Holidays_IsReadOnly(ref result);
                    return result;
                }
                private static void _Holidays_Validate(global::LightSwitchApplication.UtilizationTracker e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Holidays_Validate(r);
                }
                private static int _Holidays_GetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d)
                {
                    return d.ImplementationEntity.Holidays;
                }
                private static void _Holidays_SetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d, int v)
                {
                    d.ImplementationEntity.Holidays = v;
                }
                private static void _Holidays_OnValueChanged(global::LightSwitchApplication.UtilizationTracker e)
                {
                    e.Holidays_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Entry
                    Year = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Entry(
                        "Year",
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Year_Stub,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Year_ComputeIsReadOnly,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Year_Validate,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Year_GetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Year_SetImplementationValue,
                        global::LightSwitchApplication.UtilizationTracker.DetailsClass.PropertySetProperties._Year_OnValueChanged);
                private static void _Year_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Data> c, global::LightSwitchApplication.UtilizationTracker.DetailsClass d, object sf)
                {
                    c(d, ref d._Year, sf);
                }
                private static bool _Year_ComputeIsReadOnly(global::LightSwitchApplication.UtilizationTracker e)
                {
                    bool result = false;
                    e.Year_IsReadOnly(ref result);
                    return result;
                }
                private static void _Year_Validate(global::LightSwitchApplication.UtilizationTracker e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Year_Validate(r);
                }
                private static int _Year_GetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d)
                {
                    return d.ImplementationEntity.Year;
                }
                private static void _Year_SetImplementationValue(global::LightSwitchApplication.UtilizationTracker.DetailsClass d, int v)
                {
                    d.ImplementationEntity.Year = v;
                }
                private static void _Year_OnValueChanged(global::LightSwitchApplication.UtilizationTracker e)
                {
                    e.Year_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, decimal>.Data _WorkedHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Data _EmpID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Data _MonthID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>>.Data _TotalHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Data _WeekDays;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, global::System.Nullable<int>>.Data _WorkingDays;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, string>.Data _MonthName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Data _Holidays;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.UtilizationTracker, global::LightSwitchApplication.UtilizationTracker.DetailsClass, int>.Data _Year;
            
        }
    
        #endregion
    }
    
    #endregion
}
